1. FTC = Fast Transitive Closure, a.k.a COMP_TC (in enu's thesis)

Reads the input in the adjacency list format. Collects adjacent
components into auxiliary sets, one set per vertex.  Adjacent
component sets are ordered binary trees.  Uses Tarjan's algorithm to
detect the components, no other stack. When a component is detected,
the adjacent component sets of its nodes are scanned and the successor
set of the component is computed. The processing depends on the
following parameters:

COMBINE_ADJ_ROOTS: How the adjacent component sets are combined during
or after the depth-first search.
- NEVER: Do not combine them.
- AT_NONROOT: Combine the ac set of a non-root node x to the ac set of its 
  final candidate root y when exiting x.
- AT_ROOT: Combine all ac sets of a component after detecting the
  component and before computing the successor set of the component.
  This eliminates all duplicates.
- LOWEST: Do not combine the sets. Instead, insert adjacent components
  of vertex x directly to the ac set of the current root candidate of x.

STACK_PROCESSING_ORDER: The order in which the nodes of the component are 
processed when the component is fully detected:
- ENTER: The nodes are processed in the depth-first search enter order.
- REVERSE_ENTER: The nodes are processed in the reversed depth-first search enter order.
- EXIT: The nodes are processed in the depth-first search exit order.
- REVERSE_EXIT: The nodes are processed in the reversed depth-first search exit order.

SUCCESSOR_SET_INSERTION_ORDER: The ordering criterion for ac sets
which is also the order, in which the components in an ac set are
added to a successor set under construction.
- TOPOLOGICAL: The ac sets are processed in a topological order of the
  component numbers. This should be optimal.
- REVERSE_TOPOLOGICAL: This is implemented only to figure out how many unions
  the topological order saves.

2. NTC = New Transitive Closure, a.k.a. CR_TC (in enu's thesis)
Reads the input in the adjacency list format. Uses Tarjan's algorithm to
detect the components, no other stack. Constructs partial successor
sets which are combined to get the full successor set of the components.
The processing depends on the following parameters:

STACK_PROCESSING_ORDER: The order in which the nodes of the component are 
processed when the component is fully detected:
- ENTER: The nodes are processed in the depth-first search enter order.
- REVERSE_ENTER: The nodes are processed in the reversed depth-first search enter order.

COMBINE: How the partial successor sets are combined during the
depth-first search
- COMBINE_NEVER: Do not combine them, instead compute the union of
  these sets, when the component is fully detected.
- COMBINE_LOWEST: Do not combine them
- COMBINE_AT_NONROOT: Combine the ac set of a non-root node to the ac set of its 
  final candidate root.
- COMBINE_EKS: Resembles Eve-Kurki-Suonio algorithm

3. STACK_COMP_TC, a.k.a EDGE_STACK_COMP_TC and ESCTCU (Edge Stack
Component Transitive Closure Unsorted)
Resembles COMP_TC. Instead of using adjacent component sets the
algorithm uses another stack where the adjacent components are
inserted during the depth-first traversal. When a component is
detected the components adjacent to it are on top of the stack. There
may be duplicate components on the stack.

The 'edge stack' is a misnomer, since the stack does not contain
edges, but components.

4. SORT_STACK_COMP_TC, a.k.a ESCTCS (...Sorted)
A version of STACK_COMP_TC that sorts the adjacent components on the
components stack into a topological order before constructing the
successor set. Duplicate components are eliminated. This minimizes the
number of union operations needed (one union per each edge of the
transitive reduction of the condensation graph induced by the strong
components of the input graph).

Each of the algorithms above uses the range representation for
successor sets.
